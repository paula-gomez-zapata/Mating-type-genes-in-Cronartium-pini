################################################################################
# 03 Trimmomatic
# Remove adapter sequences and index sequences. 
################################################################################

# directory where raw data files are found
data="/nfs4/my-mgrid-s8/mykopat-proj1/mykopat-c-flacc/raw-data/resequencing/220923_A00605_0495_BHJ5JKDRX2"
# string that identifies read 1 files
r1tag="_R1_001"
# string that identifies read 2 files
r2tag="_R2_001"
# terminal part of fastq filenames
fastqsuffix=".fastq.gz"
# search term for fastq files
target="$data/Sample_VH-3377-*/*$r1tag$fastqsuffix"    
# directory for the trimmed files
trimmed="/nfs4/my-mgrid-s8/mykopat-proj1/mykopat-c-flacc/analysis/02trimmed_adapters2-14-7-2"  
# adapter file
adapter=/nfs4/my-mgrid-s8/mykopat-proj1/mykopat-c-flacc/analysis/02trimmed_adapters/combined_adapters_and_indexes.fa    
# change to true to skip after trimming QC
runfqc_after=true
#
#-------------------------------------------------------------------------------
# parameter report
#-------------------------------------------------------------------------------
echo "Trimmomatic"
echo -e "\tdata directory: $data/"
echo -e "\tR1/R2 tags: $r1tag/$r2tag"
echo -e "\tfastq file suffix: $fastqsuffix"
echo -e "\ttarget: $target"
echo -e "\toutput directory: $trimmed/"

if $runfqc_after; then
    echo -e "\tFastQC after trimming: $fqc_after_dir"
fi
echo -e "\tadapter file: $adapter"

# Trimming command explanation for Trimmomatic (ILLUMINACLIP)
# Format: ILLUMINACLIP:<adapter_file>:<seedMismatches>:<palindromeClipThreshold>:<simpleClipThreshold>:<minAdapterLength>:<keepBothReads>

# seedMismatches: Maximum number of mismatches allowed in the seed (initial part of the adapter sequence).
# palindromeClipThreshold: Stringency for detecting adapter dimers in paired-end reads via palindrome alignment.
# simpleClipThreshold: Minimum alignment score needed for adapter clipping based on a simple alignment.
# minAdapterLength: Minimum adapter length to be considered a valid match (default is 8; can be lowered to 1 for more aggressive trimming).
# keepBothReads: If set to 'true', retains both reads after adapter clipping, even if they contain redundant sequence information.
#                This may be necessary if downstream tools require strictly paired-end input.
# LEADING:<quality> – Removes low-quality bases from the beginning of the read.
#                     Bases are removed until a base with quality ≥ specified threshold is found.
# TRAILING:<quality> – Removes low-quality bases from the end of the read.
#                      Bases are trimmed from the 3' end until a base meets the quality threshold.
# Quality score of 10 corresponds to 90% base call accuracy (10% chance of error).
# SLIDINGWINDOW:<windowSize>:<requiredQuality> – Applies a sliding window approach.
# Scans the read with a window of <windowSize> bases (e.g. 5), and cuts the read once the average quality in the window drops below <requiredQuality> (e.g. 16).
# Example: For a 5-base window, if one base has a quality of 0 (e.g. due to a sequencing error) and the rest have quality 20,
# the average is (4×20 + 0)/5 = 16. This explains the use of 16 as a threshold.
# MINLEN:<length> – Discards reads that fall below the specified length after trimming.
# Useful to ensure that only sufficiently long, high-quality reads are retained for downstream analysis.
# Note: These thresholds can be adjusted based on your quality requirements and downstream tool compatibility.


trimmer="ILLUMINACLIP:$adapter:2:14:7:2:true \
LEADING:10 \
TRAILING:10 \
SLIDINGWINDOW:5:16 \
MINLEN:30"
 
echo -e "\trimming command: $trimmer"
 
#-------------------------------------------------------------------------------
# check for debug mode
#-------------------------------------------------------------------------------
debug=false
if [[ $1 == "debug" ]]; then
    debug=true
fi
if $debug; then
    echo -e "\n#-------------------------------------------------------------------------------"
    echo -e "# Debug mode: commands will not be executed"
    echo -e "#-------------------------------------------------------------------------------"
else
    echo -e "\n#-------------------------------------------------------------------------------"
    echo -e "# Executing script"
    echo -e "#-------------------------------------------------------------------------------"
fi

################################################################################
# begin script; 
################################################################################

module load fastqc
java -Xmx1G -jar /opt/sw/trimmomatic/0.36/trimmomatic-0.36.jar

#-------------------------------------------------------------------------------
# Trimmomatic
# input is all files that match the target:"$data/Sample_VH-3377-*/*$r1tag$fastqsuffix"
#-------------------------------------------------------------------------------
echo -e "\nTrimmomatic"
echo -e "\t`date`"
 
# Directory where you want to create subdirectories for each DNA sample
output_dir="/nfs4/my-mgrid-s8/mykopat-proj1/mykopat-c-flacc/analysis/02trimmed_adapters2-14-7-2/"

# Extract folder names from the raw-data directory
raw_data_dir="/nfs4/my-mgrid-s8/mykopat-proj1/mykopat-c-flacc/raw-data/resequencing/220923_A00605_0495_BHJ5JKDRX2"
folder_names=($(find "$raw_data_dir" -maxdepth 1 -type d -name "Sample*" -exec basename {} \;))

# Create subdirectories based on the names in the raw-data directory
for folder_name in "${folder_names[@]}"; do
    mkdir -p "${output_dir}/${folder_name}"
done

# run trimmomatic on each set of reads
for r1 in $target
do
    # for each read 1, generate the read 2 name be replacing $r1tag with $r2tag
    # generate the paired and unpaired output file names by replacing
    # $fastqsuffix with paired$fastqsuffix or unpaired.$fastqsuffix in both
    # read 1 and read 2 names
 
    r2="${r1/$r1tag/$r2tag}"
    r1p="${r1/$fastqsuffix/.paired$fastqsuffix}"
    r1u="${r1/$fastqsuffix/.unpaired$fastqsuffix}"
    r2p="${r2/$fastqsuffix/.paired$fastqsuffix}"
    r2u="${r2/$fastqsuffix/.unpaired$fastqsuffix}"
 
    # remove data directory from output files
    r1p=$trimmed/"${r1p/$data\//}"
    r1u=$trimmed/"${r1u/$data\//}"
    r2p=$trimmed/"${r2p/$data\//}"
    r2u=$trimmed/"${r2u/$data\//}"

    com1="java -Xmx1G -jar /opt/sw/trimmomatic/0.36/trimmomatic-0.36.jar PE \
    -threads 20 \
    $r1 $r2 \
    $r1p $r1u \
    $r2p $r2u \
    $trimmer"
    com1out=${com1//     /\\n\\t    }
    echo -e "\n\t$com1out"
    
    # Execute the trimming command
    echo -e "\nTrimming reads:"
    echo -e "\t`date`"
    echo -e "\t$com1"
    if ! $debug; then
        $com1
    fi
done
      

echo -e "\n`date`"
